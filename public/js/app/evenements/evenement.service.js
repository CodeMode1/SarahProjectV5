"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var http_1 = require('@angular/http');
var evenement_1 = require('./evenement');
require('rxjs/Rx');
var Observable_1 = require('rxjs/Observable');
var EvenementService = (function () {
    function EvenementService(_http) {
        this._http = _http;
        this.evenements = [];
    }
    EvenementService.prototype.getEvenements = function () {
        var _this = this;
        return this._http.get('http://localhost:3000/evenement')
            .map(function (response) {
            var data = response.json().obj;
            var objs = [];
            for (var i = 0; i < data.length; i++) {
                var evenement = new evenement_1.Evenement(data[i]._id, data[i].noEvenement, data[i].nom, data[i].dateEvenement, data[i].contact, data[i].client, data[i].selectEtat, data[i].dateSoumission, data[i].dateConfirmation, data[i].dateFacturation, data[i].dateNonRetenu, data[i].dateAnnulation, data[i].notes, data[i].validationTache, data[i].creerPar, data[i].dateCree, data[i].modifPar, data[i].modif, data[i].client_FK);
                objs.push(evenement);
                console.log(data[i].client_FK);
            }
            ;
            // Mettre a jour le array d'evx du service.
            _this.evenements = objs;
            console.log("array du service: " + JSON.stringify(_this.evenements));
            return objs;
        })
            .catch(function (error) { return Observable_1.Observable.throw(error.json() || 'erreur serveur'); });
    };
    EvenementService.prototype.getEvenement = function (noEvenement) {
        return this._http.get('http://localhost:3000/evenement/' + noEvenement)
            .map(function (response) {
            var data = response.json().obj;
            var evenement = new evenement_1.Evenement(data._id, data.noEvenement, data.nom, data.dateEvenement, data.contact, data.client, data.selectEtat, data.dateSoumission, data.dateConfirmation, data.dateFacturation, data.dateNonRetenu, data.dateAnnulation, data.notes, data.validationTache, data.creerPar, data.dateCree, data.modifPar, data.modif, data.client_FK, data.activites);
            return evenement;
        })
            .catch(function (error) { return Observable_1.Observable.throw(error.json() || 'erreur serveur'); });
    };
    EvenementService.prototype.creerEvenement = function (evenement) {
        var body = JSON.stringify(evenement);
        console.log("body de l'evenement : ");
        console.log(body);
        var header = new http_1.Headers({ 'Content-Type': 'application/json' });
        var token = localStorage.getItem('token') ? '?token=' + localStorage.getItem('token') : '';
        return this._http.post('http://localhost:3000/evenement' + token, body, { headers: header })
            .map(function (response) {
            var data = response.json().obj;
            var evenement = new evenement_1.Evenement(data._id, data.noEvenement, data.nom, data.dateEvenement, data.contact, data.client, data.selectEtat, data.dateSoumission, data.dateConfirmation, data.dateFacturation, data.dateNonRetenu, data.dateAnnulation, data.notes, data.validationTache, data.creerPar, data.dateCree, data.modifPar, data.modif, data.client_FK, data.activites);
            return evenement;
        })
            .catch(function (error) { return Observable_1.Observable.throw(error.json() || 'erreur serveur'); });
    };
    EvenementService.prototype.updateEvenement = function (evenement) {
        var body = JSON.stringify(evenement);
        var header = new http_1.Headers({ 'Content-Type': 'application/json' });
        var token = localStorage.getItem('token') ? '?token=' + localStorage.getItem('token') : '';
        return this._http.put('http://localhost:3000/evenement/' + evenement.evenementId + token, body, { headers: header })
            .map(function (response) { return response.json(); })
            .catch(function (error) { return Observable_1.Observable.throw(error.json() || 'erreur serveur'); });
    };
    EvenementService.prototype.deleteEvenement = function (evenement) {
        this.evenements.splice(this.evenements.indexOf(evenement), 1);
        var token = localStorage.getItem('token') ? '?token=' + localStorage.getItem('token') : '';
        return this._http.delete('http://localhost:3000/evenement/' + evenement.evenementId + token)
            .map(function (response) { return response.json(); })
            .catch(function (error) { return Observable_1.Observable.throw(error.jsons() || 'erreur serveur'); });
    };
    EvenementService.prototype.getEvenementsSpecialSearch = function (textSearch) {
        var _this = this;
        return this._http.get('http://localhost:3000/evenement/search/' + textSearch)
            .map(function (response) {
            var data = response.json().obj;
            var objs = [];
            for (var i = 0; i < data.length; i++) {
                var evenement = new evenement_1.Evenement(data[i]._id, data[i].noEvenement, data[i].nom, data[i].dateEvenement, data[i].contact, data[i].client, data[i].selectEtat, data[i].dateSoumission, data[i].dateConfirmation, data[i].dateFacturation, data[i].dateNonRetenu, data[i].dateAnnulation, data[i].notes, data[i].validationTache, data[i].creerPar, data[i].dateCree, data[i].modifPar, data[i].modif);
                objs.push(evenement);
                console.log('les evx filtrÃ©s: ' + JSON.stringify(evenement));
            }
            ;
            _this.evenements = objs;
            console.log('array filtrer : ');
            console.log(_this.evenements);
            return objs;
        })
            .catch(function (error) { return Observable_1.Observable.throw(error.json() || 'erreur serveur'); });
    };
    EvenementService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [http_1.Http])
    ], EvenementService);
    return EvenementService;
}());
exports.EvenementService = EvenementService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
